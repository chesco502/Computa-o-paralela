#include <stdio.h>
#include <stdlib.h>
#include <mpfr.h>
#include <omp.h>

void calcularFatoriais(mpfr_t *fatoriais, int n, int precisaoBits) {
    mpfr_init2(fatoriais[0], precisaoBits);
    mpfr_set_ui(fatoriais[0], 1, MPFR_RNDN);

    for (int i = 1; i <= n; i++) {
        mpfr_init2(fatoriais[i], precisaoBits);
        mpfr_mul_ui(fatoriais[i], fatoriais[i-1], i, MPFR_RNDN);
    }
}

void calcularSerieEuler(mpfr_t *fatoriais, mpfr_t somaGlobal, int n, int precisaoBits) {
    int idThread = omp_get_thread_num();
    int numThreads = omp_get_num_threads();
    
    int tamanhoBloco = n / numThreads;
    int inicio = idThread * tamanhoBloco;
    int fim = (idThread == numThreads - 1) ? n : (inicio + tamanhoBloco);

    mpfr_t termo, somaLocal;
    mpfr_init2(termo, precisaoBits);
    mpfr_init2(somaLocal, precisaoBits);
    mpfr_set_ui(somaLocal, 0, MPFR_RNDN);

    for (int i = inicio; i < fim; i++) {
        mpfr_ui_div(termo, 1, fatoriais[i], MPFR_RNDN);
        mpfr_add(somaLocal, somaLocal, termo, MPFR_RNDN);
    }

    mpfr_add(somaGlobal, somaGlobal, somaLocal, MPFR_RNDN);
    mpfr_clear(termo);
    mpfr_clear(somaLocal);
    
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        printf("Uso: <threads> <iteracoes> <precisao_bits>\n");
        return 1;
    }

    int numThreads = atoi(argv[1]);
    int n = atoi(argv[2]);
    int precisaoBits = atoi(argv[3]);

    mpfr_t soma, *fatoriais;
    mpfr_init2(soma, precisaoBits);
    mpfr_set_ui(soma, 0, MPFR_RNDN);

    fatoriais = (mpfr_t *) malloc(n * sizeof(mpfr_t));
    calcularFatoriais(fatoriais, n, precisaoBits);

    omp_set_num_threads(numThreads);
#	pragma omp parallel num_threads(numThreads)
    {
        calcularSerieEuler(fatoriais, soma, n, precisaoBits);
    }

    printf("Resultado do calculo de  Euler: \ne = ");
    mpfr_out_str(stdout, 10, 0, soma, MPFR_RNDU);
    printf("\n");

    mpfr_clear(soma);
    free(fatoriais);

    return 0;
}
